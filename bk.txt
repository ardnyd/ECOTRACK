<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Web Map Advanced - Static SHP with Mapbox</title>
    <link rel="stylesheet" href="style.css" />

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet" />
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>

    <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-compare/v0.4.0/mapbox-gl-compare.css" type="text/css" />
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-compare/v0.4.0/mapbox-gl-compare.js"></script>

    <style>
        body { margin: 0; padding: 0; }
        .container {
            display: flex;
            flex-direction: column;
            height: 100vh;
        }
        header {
            background-color: #333;
            color: #fff;
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        nav a {
            color: #fff;
            text-decoration: none;
            margin-left: 20px;
        }
        nav a.active {
            font-weight: bold;
            text-decoration: underline;
        }
        main {
            display: flex;
            flex: 1; /* Mengisi sisa ruang vertikal */
        }
        .sidebar {
            width: 200px;
            background-color: #f4f4f4;
            padding: 20px;
            border-right: 1px solid #ccc;
        }
        .sidebar-item {
            padding: 10px 0;
            cursor: pointer;
            border-bottom: 1px solid #eee;
            font-size: 1.1em;
            color: #555;
        }
        .sidebar-item:hover {
            background-color: #e9e9e9;
        }
        .active-sidebar-item {
            font-weight: bold;
            color: #333;
            background-color: #e0e0e0;
        }
        .map-content {
            flex: 1; /* Mengisi sisa ruang horizontal */
            position: relative; /* Penting untuk posisi absolut peta */
        }
        .map-view {
            position: absolute; /* Setiap panel peta overlay satu sama lain */
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column; /* Untuk menempatkan tombol tahun di atas peta */
        }
        .hidden-panel {
            display: none !important;
        }
        #mapCompareContainer, #mapContainerLeft {
            flex: 1; /* Membuat peta mengisi sisa ruang di dalam panel */
            width: 100%;
            height: 100%; /* Ini penting untuk peta Mapbox/Leaflet */
        }
        #mapLeft, #mapRight {
            width: 100%;
            height: 100%; /* Mapbox GL JS maps need explicit height */
            position: absolute; /* Penting untuk Mapbox GL Compare */
            top: 0;
            bottom: 0;
        }
        .year-tabs {
            padding: 10px;
            background-color: #f0f0f0;
            border-bottom: 1px solid #ccc;
            text-align: center;
        }
        .year-tab {
            padding: 8px 15px;
            margin: 0 5px;
            border: 1px solid #aaa;
            background-color: #eee;
            cursor: pointer;
            border-radius: 4px;
        }
        .year-tab.active-year-tab, .year-tab:hover {
            background-color: #007bff;
            color: white;
            border-color: #007bff;
        }
        #loadingMessageAdmin { text-align: center; padding: 10px; color: #555; }
    </style>
</head>

<body>
    <div class="container">
        <header>
            <div class="logo-placeholder"></div>
            <nav>
                <a href="#">HOME</a>
                <a href="#" class="active">MAPS</a>
                <a href="#">RESTORATION</a>
            </nav>
        </header>
        <main>
            <aside class="sidebar">
                <div id="adminBoundaryBtn" class="sidebar-item active-sidebar-item">ADMINISTRATIVE BOUNDARY</div>
                <div id="landCoverBtn" class="sidebar-item">LAND COVER</div>
                <div id="emissionBtn" class="sidebar-item">EMISSION</div>
            </aside>
            <section class="map-content">
                <div id="adminBoundaryPanel" class="map-view">
                    <div id="loadingMessageAdmin" style="display: none;">Memuat data batas administrasi...</div>
                    <div id="mapContainerLeft" class="map-container"></div>
                </div>

                <div id="landCoverPanel" class="map-view hidden-panel">
                    <div style="display: flex; justify-content: center; width: 100%;">
                        <div class="year-tabs">
                            <button class="year-tab active-year-tab" data-left="year1_landcover" data-right="year2_landcover" onclick="loadLandCoverComparison('year1_landcover', 'year2_landcover', this)">YEAR 1 vs 2</button>
                            <button class="year-tab" data-left="year3_landcover" data-right="year4_landcover" onclick="loadLandCoverComparison('year3_landcover', 'year4_landcover', this)">YEAR 3 vs 4</button>
                        </div>
                    </div>
                    <div id="mapCompareContainer"> <div id="mapLeft" class="map"></div> <div id="mapRight" class="map"></div> </div>
                </div>

                <div id="emissionPanel" class="map-view hidden-panel">
                    <h3 style="text-align:center; margin-top:20px;">Emission Data Panel</h3>
                    <p style="text-align:center;">Konten untuk emisi akan ditampilkan di sini.</p>
                    <div class="map-container"
                        style="background-color:#e0e0e0; display:flex; align-items:center; justify-content:center;">
                        (Placeholder untuk Peta Emisi)
                    </div>
                    <div class="legenda">LEGENDA EMISSION</div>
                </div>
            </section>
        </main>
    </div>

    <script src="https://unpkg.com/shpjs@latest/dist/shp.min.js"></script>
    <script>
        // --- Bagian Leaflet untuk Administrative Boundary ---
        let mapAdmin = null;
        let currentShapefileLayer = null;
        let isAdminBoundaryLoaded = false;
        const staticAdminShpUrl = 'batas_area.zip'; // Pastikan ini ada dan bisa diakses

        async function loadAndDisplayStaticSHP() {
            if (!mapAdmin || isAdminBoundaryLoaded) return;
            const loadingMessage = document.getElementById('loadingMessageAdmin');
            loadingMessage.style.display = 'block';
            try {
                const response = await fetch(staticAdminShpUrl);
                if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                const buffer = await response.arrayBuffer();
                const geojson = await shp(buffer); // Menggunakan shp.js untuk konversi ZIP ke GeoJSON
                if (currentShapefileLayer) mapAdmin.removeLayer(currentShapefileLayer);
                currentShapefileLayer = L.geoJSON(geojson, {
                    onEachFeature: (feature, layer) => {
                        if (feature.properties) {
                            let popup = "<strong>Properti:</strong><ul>";
                            for (let key in feature.properties) {
                                popup += `<li><strong>${key}:</strong> ${feature.properties[key]}</li>`;
                            }
                            popup += "</ul>";
                            layer.bindPopup(popup);
                        }
                    },
                    style: { color: "#0033cc", weight: 2, opacity: 0.9, fillOpacity: 0.15, fillColor: "#3366ff" }
                }).addTo(mapAdmin);
                const bounds = currentShapefileLayer.getBounds();
                bounds.isValid() ? mapAdmin.fitBounds(bounds) : mapAdmin.setView([0, 110], 4);
                isAdminBoundaryLoaded = true;
            } catch (err) {
                console.error("Gagal memuat SHP:", err);
                alert("Gagal memuat shapefile. Periksa konsol untuk detail dan pastikan file 'batas_area.zip' tersedia dan server lokal berjalan.");
            } finally {
                loadingMessage.style.display = 'none';
            }
        }

        function initAdminBoundaryMap() {
            if (!mapAdmin) {
                mapAdmin = L.map('mapContainerLeft').setView([0, 110], 4);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; OpenStreetMap contributors'
                }).addTo(mapAdmin);
                loadAndDisplayStaticSHP();
            }
        }

        // --- Bagian Mapbox GL JS untuk Land Cover Compare ---
        let mapboxMapLeft, mapboxMapRight, mapboxCompareControl;
        let geoJsonLayersAdded = false; // Flag untuk memastikan GeoJSON hanya ditambahkan sekali atau dikelola dengan benar

        // **PENTING! Ganti dengan Mapbox Access Token Anda**
        const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiZnVhZGFndXNzYWxpbSIsImEiOiJjbGcyZ2Q1ZXMwMHZ2M2RuMW9uOHZ0cDNoIn0.odEIHnmRUwKd2wUq_nBowQ';

        // Contoh style dari Mapbox. Anda bisa menggantinya.
        const mapboxStyles = {
            year1: 'mapbox://styles/mapbox/streets-v12',
            year2: 'mapbox://styles/mapbox/satellite-streets-v12',
            year3: 'mapbox://styles/mapbox/outdoors-v12',
            year4: 'mapbox://styles/mapbox/light-v11'
        };

        // **Tambahkan definisi untuk data GeoJSON (lokal)**
        const geoJsonDataSources = {
            // Contoh menggunakan contoh.geojson Anda
            year1_landcover: 'contoh.geojson',
            year2_landcover: 'contoh.geojson', // Untuk perbandingan, Anda biasanya punya data berbeda di sini
            year3_landcover: 'contoh.geojson', // Ganti dengan GeoJSON berbeda jika ada
            year4_landcover: 'contoh.geojson'  // Ganti dengan GeoJSON berbeda jika ada
        };

        function initLandCoverCompareMapWithMapbox() {
            if (!MAPBOX_ACCESS_TOKEN || MAPBOX_ACCESS_TOKEN === 'GANTI_DENGAN_MAPBOX_ACCESS_TOKEN_ANDA') {
                alert("PENTING: Harap masukkan Mapbox Access Token Anda di dalam kode JavaScript!");
                console.error("Mapbox Access Token belum diatur.");
                return;
            }
            mapboxgl.accessToken = MAPBOX_ACCESS_TOKEN;

            // Hanya inisialisasi jika belum ada
            if (!mapboxMapLeft && !mapboxMapRight) {
                mapboxMapLeft = new mapboxgl.Map({
                    container: 'mapLeft', // ID div untuk peta kiri
                    style: mapboxStyles.year1, // Initial basemap style
                    center: [110, 0], // Sesuaikan center awal jika perlu
                    zoom: 3           // Sesuaikan zoom awal jika perlu
                });

                mapboxMapRight = new mapboxgl.Map({
                    container: 'mapRight', // ID div untuk peta kanan
                    style: mapboxStyles.year2, // Initial basemap style
                    center: [110, 0], // Sesuaikan center awal jika perlu
                    zoom: 3           // Sesuaikan zoom awal jika perlu
                });

                // Inisialisasi mapbox-gl-compare
                mapboxCompareControl = new mapboxgl.Compare(mapboxMapLeft, mapboxMapRight, '#mapCompareContainer');

                // Sinkronisasi peta (opsional, tapi berguna)
                var LGL = {}; // Objek untuk menyimpan status sinkronisasi
                function mapSync() {
                    if (LGL.syncing) {return;}
                    LGL.syncing = true;
                    if(this === mapboxMapLeft) mapboxMapRight.jumpTo({center: mapboxMapLeft.getCenter(), zoom: mapboxMapLeft.getZoom(), bearing: mapboxMapLeft.getBearing(), pitch: mapboxMapLeft.getPitch()});
                    else mapboxMapLeft.jumpTo({center: mapboxMapRight.getCenter(), zoom: mapboxMapRight.getZoom(), bearing: mapboxMapRight.getBearing(), pitch: mapboxMapRight.getPitch()});
                    LGL.syncing = false;
                }
                mapboxMapLeft.on('move', mapSync);
                mapboxMapRight.on('move', mapSync);

                console.log("Mapbox compare map initialized.");

                // Panggil fungsi untuk memuat GeoJSON setelah peta diinisialisasi dan style dimuat
                // Ini akan memastikan GeoJSON pertama kali dimuat saat panel Land Cover dibuka
                mapboxMapLeft.on('style.load', () => {
                    console.log("Left map style loaded, adding initial GeoJSON.");
                    compareShapefileData('year1_landcover', 'year2_landcover');
                });
                mapboxMapRight.on('style.load', () => {
                    console.log("Right map style loaded, adding initial GeoJSON.");
                    // Tidak perlu panggil di sini lagi karena compareShapefileData memuat keduanya
                });
            }
        }

        function setMapboxCompareStyles(leftKey, rightKey) {
            if (!mapboxMapLeft || !mapboxMapRight) {
                console.warn("Peta Mapbox (mapboxMapLeft atau mapboxMapRight) belum diinisialisasi.");
                initLandCoverCompareMapWithMapbox(); // Coba inisialisasi jika belum
                if (!mapboxMapLeft || !mapboxMapRight) return;
            }

            // Set style peta
            mapboxMapLeft.setStyle(mapboxStyles[leftKey]);
            mapboxMapRight.setStyle(mapboxStyles[rightKey]);
            console.log(`Mapbox styles set: Left - ${leftKey}, Right - ${rightKey}`);

            // Setelah style diubah, GeoJSON perlu ditambahkan kembali karena
            // setStyle akan menghapus semua layer dan source kustom.
            // Panggil kembali compareShapefileData untuk memuat ulang GeoJSON
            // setelah style baru dimuat sepenuhnya.
            mapboxMapLeft.once('style.load', () => {
                console.log(`Left map new style loaded for ${leftKey}, reloading GeoJSON.`);
                compareShapefileData(leftKey, rightKey); // Memastikan GeoJSON dimuat dengan style baru
            });
            mapboxMapRight.once('style.load', () => {
                console.log(`Right map new style loaded for ${rightKey}.`);
                // Tidak perlu panggil compareShapefileData lagi karena sudah dipanggil di mapboxMapLeft.once
            });
        }

        /**
         * Function to load and display GeoJSON data on the compare maps.
         * @param {string} leftGeoJsonKey - Key from geoJsonDataSources for the left map's GeoJSON.
         * @param {string} rightGeoJsonKey - Key from geoJsonDataSources for the right map's GeoJSON.
         * @param {object} layerOptions - Options for the Mapbox GL JS layer (e.g., type, paint).
         */
        function compareShapefileData(leftGeoJsonKey, rightGeoJsonKey, layerOptions = {}) {
            if (!mapboxMapLeft || !mapboxMapRight) {
                console.error("Maps are not initialized. Cannot load GeoJSON data.");
                return;
            }

            const defaultLayerOptions = {
                type: 'fill', // Default to fill layer for polygons
                paint: {
                    'fill-color': '#FF00FF', // Warna default magenta
                    'fill-opacity': 0.7,
                    'fill-outline-color': '#FFF'
                }
            };

            const finalLayerOptions = { ...defaultLayerOptions, ...layerOptions };

            // Function to add a GeoJSON source and layer to a map
            const addGeoJsonToMap = (map, geoJsonUrl, sourceId, layerId, options) => {
                // Remove existing source and layer if they exist to prevent duplicates
                // Ini penting saat style diubah atau saat kita memuat ulang GeoJSON
                if (map.getLayer(layerId)) {
                    map.removeLayer(layerId);
                }
                if (map.getSource(sourceId)) {
                    map.removeSource(sourceId);
                }

                map.addSource(sourceId, {
                    type: 'geojson',
                    data: geoJsonUrl // Ini akan menjadi 'contoh.geojson'
                });

                map.addLayer({
                    id: layerId,
                    type: options.type,
                    source: sourceId,
                    paint: options.paint
                    // Add other layer properties like layout, filter, minzoom, maxzoom if needed
                });
                console.log(`GeoJSON layer '${layerId}' added to map.`);
            };

            // Panggil addGeoJsonToMap langsung karena kita sekarang memanggil
            // compareShapefileData *setelah* style.load event.
            addGeoJsonToMap(
                mapboxMapLeft,
                geoJsonDataSources[leftGeoJsonKey],
                'left-landcover-source', // Ubah ID sumber agar lebih spesifik
                'left-landcover-layer',   // Ubah ID layer agar lebih spesifik
                finalLayerOptions
            );

            addGeoJsonToMap(
                mapboxMapRight,
                geoJsonDataSources[rightGeoJsonKey],
                'right-landcover-source', // Ubah ID sumber
                'right-landcover-layer',    // Ubah ID layer
                finalLayerOptions
            );

            console.log(`Mapbox GeoJSON comparison initiated for: Left - ${leftGeoJsonKey}, Right - ${rightGeoJsonKey}`);
        }

        // --- Logika Panel Switching (Disesuaikan) ---
        function setActivePanel(panelId) {
            const panels = ['adminBoundaryPanel', 'landCoverPanel', 'emissionPanel'];
            const buttons = ['adminBoundaryBtn', 'landCoverBtn', 'emissionBtn'];

            panels.forEach(id => document.getElementById(id).classList.add('hidden-panel'));
            buttons.forEach(id => document.getElementById(id).classList.remove('active-sidebar-item'));

            document.getElementById(panelId).classList.remove('hidden-panel');
            document.getElementById(panelId.replace('Panel', 'Btn')).classList.add('active-sidebar-item');

            if (panelId === 'adminBoundaryPanel') {
                initAdminBoundaryMap();
                if (mapAdmin) {
                    mapAdmin.invalidateSize();
                }
                // Hancurkan peta Mapbox GL JS jika tidak diperlukan untuk menghemat sumber daya
                if (mapboxMapLeft) { mapboxMapLeft.remove(); mapboxMapLeft = null; }
                if (mapboxMapRight) { mapboxMapRight.remove(); mapboxMapRight = null; }
                if (mapboxCompareControl) { mapboxCompareControl.remove(); mapboxCompareControl = null; }
                geoJsonLayersAdded = false; // Reset flag
            } else if (panelId === 'landCoverPanel') {
                // Panggil fungsi inisialisasi untuk Mapbox GL Compare
                initLandCoverCompareMapWithMapbox();
                
                // Panggil resize pada peta Mapbox setelah panel terlihat dan peta diinisialisasi
                // Penundaan singkat mungkin diperlukan agar container memiliki dimensi yang benar
                setTimeout(() => {
                    if (mapboxMapLeft) mapboxMapLeft.resize();
                    if (mapboxMapRight) mapboxMapRight.resize();
                }, 100); // Sedikit penundaan lebih aman
            } else if (panelId === 'emissionPanel') {
                // Logika untuk panel emisi
                // Hancurkan peta Mapbox GL JS dan Leaflet jika tidak diperlukan
                if (mapAdmin) { mapAdmin.remove(); mapAdmin = null; isAdminBoundaryLoaded = false; }
                if (mapboxMapLeft) { mapboxMapLeft.remove(); mapboxMapLeft = null; }
                if (mapboxMapRight) { mapboxMapRight.remove(); mapboxMapRight = null; }
                if (mapboxCompareControl) { mapboxCompareControl.remove(); mapboxCompareControl = null; }
                geoJsonLayersAdded = false; // Reset flag
            }
        }

        // Fungsi baru untuk menangani klik tombol tahun
        function loadLandCoverComparison(leftGeoJsonKey, rightGeoJsonKey, buttonElement) {
            // Hapus kelas 'active-year-tab' dari semua tombol
            document.querySelectorAll('.year-tab').forEach(btn => {
                btn.classList.remove('active-year-tab');
            });
            // Tambahkan kelas 'active-year-tab' ke tombol yang diklik
            buttonElement.classList.add('active-year-tab');

            // Set style basemap yang sesuai
            // Menggunakan setMapboxCompareStyles yang sudah dimodifikasi
            // setMapboxCompareStyles akan memicu pemuatan ulang GeoJSON
            // setelah style basemap baru dimuat.
            let leftStyleKey = '';
            let rightStyleKey = '';

            // Menentukan basemap berdasarkan pilihan tahun, ini contoh sederhana
            // Anda mungkin ingin logika yang lebih kompleks untuk ini
            if (leftGeoJsonKey === 'year1_landcover') {
                leftStyleKey = 'year1';
                rightStyleKey = 'year2';
            } else if (leftGeoJsonKey === 'year3_landcover') {
                leftStyleKey = 'year3';
                rightStyleKey = 'year4';
            }

            setMapboxCompareStyles(leftStyleKey, rightStyleKey);
        }


        document.getElementById('adminBoundaryBtn').addEventListener('click', () => setActivePanel('adminBoundaryPanel'));
        document.getElementById('landCoverBtn').addEventListener('click', () => setActivePanel('landCoverPanel'));
        document.getElementById('emissionBtn').addEventListener('click', () => setActivePanel('emissionPanel'));

        document.addEventListener('DOMContentLoaded', () => {
            setActivePanel('adminBoundaryPanel'); // Panel awal yang aktif
        });

    </script>
</body>
</html>